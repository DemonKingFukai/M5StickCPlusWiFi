#include <M5StickCPlus.h>
#include <WiFiNINA.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>

int menu = 0; // the current menu selection
int sub_menu = 0; // the current sub-menu selection

void setup() {
  // initialize the M5StickCPlus
  M5.begin();

  // set up the screen
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setTextSize(2);
  M5.Lcd.setCursor(0, 0);
  M5.Lcd.setTextColor(WHITE);

  // set up the buttons
  M5.Buttons.begin();

  // scan for available Wi-Fi networks
  WiFi.beginScan();
}

void loop() {
  // check which button was pressed
  int button = M5.Buttons.getButton();

  // handle the button press
  switch (button) {
    case BUTTON_A:
      // increment the current selection
      if (sub_menu < max_sub_menu(menu)) {
        sub_menu++;
      }
      break;
    case BUTTON_B:
      // select the current option
      select_option(menu, sub_menu);
      break;
    case BUTTON_C:
      // decrement the current selection
      if (sub_menu > 0) {
        sub_menu--;
      }
      break;
  }

  // update the screen with the current menu and selection
  update_screen(menu, sub_menu);
}

// determine the maximum sub-menu for the given menu
int max_sub_menu(int menu) {
  switch (menu) {
    case 0:
      return WiFi.scanComplete();
    case 1:
      return BLEDevice::getCount();
    case 2:
      return 3;
    case 3:
      return 1;
    default:
      return 0;
  }
}

// select the current option
void select_option(int menu, int sub_menu) {
  switch (menu) {
    case 0:
      // connect to the selected Wi-Fi network
      WiFi.begin(WiFi.SSID(sub_menu));
      break;
    case 1:
      // connect to the selected Bluetooth device
      BLEDevice::createClient()->connect(BLEDevice::getAddress(sub_menu));
      break;
    case 2:
      // perform the selected packet sniffing or injection task
      switch (sub_menu) {
        case 0:
          // sniff Wi-Fi packets
          break;
        case 1:
          // inject Wi-Fi packets
          break;
        case 2:
          // sniff Bluetooth packets
          break;
        case 3:
          // inject Bluetooth packets
          break;
      }
      break;
    case 3:
      // crack the selected Wi-Fi password
      display_wifi_passwords(sub_menu);
      break;
  }
}

// update the screen with the current menu and selection
void update_screen(int menu, int sub_menu) {
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setCursor(0, 0);
  switch (menu) {
    case 0:
      // list available Wi-Fi networks
      for (int i = 0; i < WiFi.scanComplete(); i++) {
        M5.Lcd.println(WiFi.SSID(i));
      }
      M5.Lcd.setCursor(0, 16 * (sub_menu + 1));
      M5.Lcd.print(">");
      break;
    case 1:
      // list available Bluetooth devices
      for (int i = 0; i < BLEDevice::getCount(); i++) {
        M5.Lcd.println(BLEDevice::getAddress(i).toString().c_str());
}
M5.Lcd.setCursor(0, 16 * (sub_menu + 1));
M5.Lcd.print(">");
break;
case 2:
// list packet sniffing/injection options
M5.Lcd.println("1. Sniff Wi-Fi packets");
M5.Lcd.println("2. Inject Wi-Fi packets");
M5.Lcd.println("3. Sniff Bluetooth packets");
M5.Lcd.println("4. Inject Bluetooth packets");
M5.Lcd.setCursor(0, 16 * (sub_menu + 1));
M5.Lcd.print(">");
break;
case 3:
// list Wi-Fi passwords to crack
display_wifi_passwords(sub_menu);
M5.Lcd.setCursor(0, 16 * (sub_menu + 1));
M5.Lcd.print(">");
break;
}
}

// display the available Wi-Fi passwords to crack
void display_wifi_passwords(int sub_menu) {
// get the list of Wi-Fi networks and their signal strength
int num_networks = WiFi.scanComplete();
int* signal_strengths = new int[num_networks];
for (int i = 0; i < num_networks; i++) {
signal_strengths[i] = WiFi.RSSI(i);
}

// sort the list of networks by signal strength
for (int i = 0; i < num_networks - 1; i++) {
for (int j = i + 1; j < num_networks; j++) {
if (signal_strengths[j] > signal_strengths[i]) {
int temp_strength = signal_strengths[i];
signal_strengths[i] = signal_strengths[j];
signal_strengths[j] = temp_strength;
String temp_ssid = WiFi.SSID(i);
WiFi.SSID(i) = WiFi.SSID(j);
WiFi.SSID(j) = temp_ssid;
}
}
}

// display the list of Wi-Fi networks and their signal strength
for (int i = 0; i < num_networks; i++) {
M5.Lcd.print(WiFi.SSID(i));
M5.Lcd.setCursor(200, M5.Lcd.getCursorY());
M5.Lcd.print(signal_strengths[i]);
M5.Lcd.setCursor(0, M5.Lcd.getCursorY() + 16);
}

// free memory allocated for signal_strengths array
delete[] signal_strengths;
}
